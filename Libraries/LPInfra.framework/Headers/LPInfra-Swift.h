// Generated by Apple Swift version 2.1.1 (swiftlang-700.1.101.15 clang-700.1.81)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if defined(__has_include) && __has_include(<uchar.h>)
# include <uchar.h>
#elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
#endif

typedef struct _NSZone NSZone;

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted) 
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
#endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
#if defined(__has_feature) && __has_feature(modules)
@import CoreData;
@import ObjectiveC;
@import Foundation;
@import Dispatch;
@import SystemConfiguration;
@import UIKit;
@import CoreGraphics;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
@class Brand;
@class NSEntityDescription;
@class NSManagedObjectContext;

SWIFT_CLASS("_TtC7LPInfra7Account")
@interface Account : NSManagedObject
@property (nonatomic, copy) NSString * __nonnull accountId;
@property (nonatomic, strong) Brand * __nonnull brand;
- (nonnull instancetype)initWithEntity:(NSEntityDescription * __nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * __nullable)context OBJC_DESIGNATED_INITIALIZER;
@end

@class Conversation;
@class Message;

SWIFT_CLASS("_TtC7LPInfra23BaseConversationManager")
@interface BaseConversationManager : NSObject
- (NSArray<Message *> * __nonnull)getIncomingMessages:(Conversation * __nullable)conversation;
- (NSArray<Message *> * __nonnull)getUnreadMessages:(Conversation * __nullable)conversation;
- (NSDictionary<Conversation *, NSNumber *> * __nonnull)getUnreadConversations;
- (NSInteger)getTotalUnread;
- (void)deleteConversation:(Conversation * __nonnull)conv;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSSet;
@class NSDate;

SWIFT_CLASS("_TtC7LPInfra5Brand")
@interface Brand : NSManagedObject
@property (nonatomic, copy) NSString * __nonnull iconURL;
@property (nonatomic, copy) NSString * __nullable imageURL;
@property (nonatomic, copy) NSString * __nullable logoURL;
@property (nonatomic, copy) NSString * __nonnull name;
@property (nonatomic, copy) NSString * __nonnull uid;
@property (nonatomic, copy) NSString * __nonnull details;
@property (nonatomic, strong) NSSet * __nonnull brandCampaigns;
@property (nonatomic, strong) NSSet * __nonnull brandConversations;
@property (nonatomic, strong) NSDate * __nonnull dateJoined;
@property (nonatomic) BOOL hidden;
@property (nonatomic, strong) NSSet * __nonnull accounts;
@property (nonatomic, copy) NSString * __nullable authenticationCode;
- (nonnull instancetype)initWithEntity:(NSEntityDescription * __nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * __nullable)context OBJC_DESIGNATED_INITIALIZER;
@end


@interface Brand (SWIFT_EXTENSION(LPInfra))
- (NSArray<Conversation *> * __nonnull)getConversations;
- (NSDate * __nonnull)getLastMessageTimeStamp;
- (BOOL)isAuthenticated;
@end


SWIFT_CLASS("_TtC7LPInfra11CSDSManager")
@interface CSDSManager : NSObject
+ (CSDSManager * __nonnull)instance;
- (void)clearManager;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7LPInfra8Campaign")
@interface Campaign : NSManagedObject
@property (nonatomic, copy) NSString * __nonnull uid;
@property (nonatomic, copy) NSString * __nonnull name;
@property (nonatomic, copy) NSString * __nonnull image;
@property (nonatomic, strong) Brand * __nonnull ownerBrand;
- (nonnull instancetype)initWithEntity:(NSEntityDescription * __nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * __nullable)context OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7LPInfra20ConfigurationManager")
@interface ConfigurationManager : NSObject
+ (ConfigurationManager * __nonnull)instance;
@end

@class NSOrderedSet;
@class NSNumber;
@class NSMutableSet;

SWIFT_CLASS("_TtC7LPInfra12Conversation")
@interface Conversation : NSManagedObject
@property (nonatomic, copy) NSString * __nullable uid;
@property (nonatomic, strong) NSDate * __nonnull creationDate;
@property (nonatomic, copy) NSString * __nonnull handlerId;
@property (nonatomic, copy) NSString * __nullable lastMessage;
@property (nonatomic, strong) NSDate * __nullable lastMessageDate;
@property (nonatomic, strong) Brand * __nonnull ownerBrand;
@property (nonatomic, strong) NSSet * __nonnull participants;
@property (nonatomic, strong) NSOrderedSet * __nonnull conversationMessages;
@property (nonatomic, copy) NSString * __nonnull stateRaw;
@property (nonatomic, strong) NSNumber * __nonnull lastReceivedSequence;
@property (nonatomic) BOOL hidden;
@property (nonatomic) BOOL resolved;
@property (nonatomic, copy) NSString * __nonnull ttrTypeRaw;
@property (nonatomic, copy) NSString * __nullable type;
@property (nonatomic, copy) NSString * __nullable assignedAgentId;
@property (nonatomic, copy) NSString * __nullable consumerId;
@property (nonatomic, strong) NSMutableSet * __nonnull currentlyAcceptedSequences;
- (nonnull instancetype)initWithEntity:(NSEntityDescription * __nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * __nullable)context OBJC_DESIGNATED_INITIALIZER;
@end

@class User;

@interface Conversation (SWIFT_EXTENSION(LPInfra))
@property (nonatomic, readonly, copy) NSArray<Message *> * __nonnull sortedMessages;
@property (nonatomic, readonly, copy) NSArray<Message *> * __nonnull unreadMessages;
@property (nonatomic, readonly, strong) Message * __nullable lastMessageObj;
@property (nonatomic, readonly, strong) User * __nullable lastMessageOriginator;
@property (nonatomic, readonly, copy) NSString * __nonnull relatedSocketID;
- (BOOL)isActivityInIdle;
- (NSArray<Message *> * __nonnull)getMessagesPage:(NSInteger)from pageSize:(NSInteger)pageSize;
- (BOOL)isCurrentlyUrgent;
- (BOOL)acceptSequence:(NSInteger)seq;
- (void)resolve;
- (void)resolve:(BOOL)byAgent;
- (NSString * __nonnull)getResolveDateString:(NSDate * __nonnull)date;
@property (nonatomic, readonly) BOOL shouldQueryMessages;
@end

@protocol LPDataManagerSDKDelegate;

SWIFT_CLASS("_TtC7LPInfra11DataManager")
@interface DataManager : NSObject
@property (nonatomic, weak) id <LPDataManagerSDKDelegate> __nullable SDKDelegate;
+ (DataManager * __nonnull)instance;
- (void)handleKeychainPersistency;
- (void)saveData:(NSManagedObjectContext * __nullable)givenContext;
- (void)saveDataWithGetContextFrom:(NSManagedObject * __nullable)obj;
- (void)deleteManagedObject:(NSManagedObject * __nonnull)object context:(NSManagedObjectContext * __nullable)givenContext;
- (BOOL)resetDatabase;
- (void)saveContext;
- (NSManagedObjectContext * __nonnull)getContext:(NSManagedObjectContext * __nullable)context;
- (void)clearManager;
@end

@class NSDictionary;
@class NSError;

SWIFT_CLASS("_TtC7LPInfra22GlobalTransportManager")
@interface GlobalTransportManager : NSObject
@property (nonatomic, readonly) BOOL isNetworkAvailable;
@property (nonatomic, copy) void (^ __nullable reachabiltyChangedBlock)(BOOL);
+ (GlobalTransportManager * __nonnull)instance;
- (void)httpRequest:(NSString * __nonnull)httpMethod dataPost:(NSString * __nonnull)dataPost destination:(NSString * __nonnull)destination headers:(NSDictionary<NSString *, NSString *> * __nullable)headers useCache:(BOOL)useCache successHandler:(void (^ __nonnull)(NSDictionary * __nullable))successHandler failHandler:(void (^ __nonnull)(NSError * __nullable))failHandler;
- (void)registerReachability;
- (BOOL)isNetworkReachable;
- (BOOL)isQA:(NSString * __nonnull)accountId;
@end

@class UIImage;

SWIFT_CLASS("_TtC7LPInfra13ImagesManager")
@interface ImagesManager : NSObject
+ (ImagesManager * __nonnull)instance;
- (void)setImageByURL:(UIImage * __nonnull)image url:(NSString * __nonnull)url;
- (UIImage * __nullable)getImageByURL:(NSString * __nonnull)url;
- (void)loadImageFromURL:(NSString * __nullable)imageUrl completion:(void (^ __nonnull)(UIImage * __null_unspecified))completion;
- (void)clearManager;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL("_TtP7LPInfra24LPDataManagerSDKDelegate_")
@protocol LPDataManagerSDKDelegate
- (void)LPMessagingSDKDataEncryptionFailed:(NSError * __nonnull)error;
@end

@class NSBundle;

SWIFT_CLASS("_TtC7LPInfra12LPSDKManager")
@interface LPSDKManager : NSObject
+ (LPSDKManager * __nonnull)instance;

/// <ul><li>Fetch the bundle - LPMessagingSDKModels.bundle</li><li>Return an NSBundle</li></ul>
+ (NSBundle * __nonnull)getBundle;

/// <ul><li>Fetch the SDKVersion from the current bundle</li><li>Return a String</li></ul>
+ (NSString * __nullable)getSDKVersion;

/// <ul><li>Fetch the static configuration data from LPCDN</li><li>Compare the version number from configFile.plist to the fetched value</li><li>Return a boolean in a completion block. The SDK is applicable if the current version is greater or euqal to the fetched value</li></ul>
+ (void)isVersionApplicable:(NSString * __nonnull)brandId completion:(void (^ __nonnull)(BOOL))completion;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSData;
@class NSURL;
@class NSStream;

SWIFT_CLASS("_TtC7LPInfra9WebSocket")
@interface WebSocket : NSObject <NSStreamDelegate>
@property (nonatomic, strong) dispatch_queue_t __null_unspecified queue;
@property (nonatomic, copy) void (^ __nullable onConnect)(void);
@property (nonatomic, copy) void (^ __nullable onDisconnect)(NSError * __nullable);
@property (nonatomic, copy) void (^ __nullable onText)(NSString * __nonnull);
@property (nonatomic, copy) void (^ __nullable onData)(NSData * __nonnull);
@property (nonatomic, copy) void (^ __nullable onPong)(void);
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * __nonnull headers;
@property (nonatomic) BOOL voipEnabled;
@property (nonatomic) BOOL selfSignedSSL;
@property (nonatomic, readonly) BOOL isConnected;
- (nonnull instancetype)initWithUrl:(NSURL * __nonnull)url OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithUrl:(NSURL * __nonnull)url protocols:(NSArray<NSString *> * __nonnull)protocols;

/// disconnect from the websocket server
- (void)disconnect;

/// write a string to the websocket. This sends it as a text frame.
- (void)writeString:(NSString * __nonnull)str;

/// write binary data to the websocket. This sends it as a binary frame.
- (void)writeData:(NSData * __nonnull)data;
- (void)writePing:(NSData * __nonnull)data;
- (void)stream:(NSStream * __nonnull)aStream handleEvent:(NSStreamEvent)eventCode;
@end


SWIFT_CLASS("_TtC7LPInfra11LPWebSocket")
@interface LPWebSocket : WebSocket
@property (nonatomic) NSInteger requestIndex;
- (void)flushQueue;
- (void)cancelRequest:(NSInteger)requestIndex;
@end


SWIFT_CLASS("_TtC7LPInfra16LanguagesManager")
@interface LanguagesManager : NSObject
@end


SWIFT_CLASS("_TtC7LPInfra8LogEvent")
@interface LogEvent : NSObject
@property (nonatomic, readonly, copy) NSString * __nonnull className;
@property (nonatomic, readonly, copy) NSString * __nonnull functionName;
@property (nonatomic, readonly, copy) NSString * __nonnull message;
@property (nonatomic, readonly, strong) NSDate * __nonnull timestamp;
@end


SWIFT_CLASS("_TtC7LPInfra7Message")
@interface Message : NSManagedObject
@property (nonatomic, strong) NSDate * __nonnull timestamp;
@property (nonatomic, copy) NSString * __nonnull content;
@property (nonatomic, copy) NSString * __nullable uid;
@property (nonatomic, copy) NSString * __nonnull statusRaw;
@property (nonatomic, copy) NSString * __nonnull contentType;
@property (nonatomic, copy) NSString * __nonnull messageType;
@property (nonatomic, strong) Conversation * __nonnull ownerConversation;
@property (nonatomic, strong) User * __nullable ownerUser;
- (NSString * __nonnull)getMessageTimeLabel;
@property (nonatomic, readonly, copy) NSString * __nonnull description;
- (nonnull instancetype)initWithEntity:(NSEntityDescription * __nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * __nullable)context OBJC_DESIGNATED_INITIALIZER;
@end

@class NSPredicate;

@interface Message (SWIFT_EXTENSION(LPInfra))
+ (NSString * __nonnull)buildUID:(NSString * __nonnull)convUID sequence:(NSInteger)sequence;
+ (NSPredicate * __nonnull)byDate:(NSDate * __nonnull)date;
@end


SWIFT_CLASS("_TtC7LPInfra21MessagingServiceEvent")
@interface MessagingServiceEvent : NSObject
@property (nonatomic, readonly, strong) Conversation * __null_unspecified conversation;
@property (nonatomic, readonly, strong) User * __nullable sender;
@property (nonatomic) BOOL shouldHandleConsumerMessages;
- (nullable instancetype)initWithFailure OBJC_DESIGNATED_INITIALIZER;
@end


@interface NSDate (SWIFT_EXTENSION(LPInfra))
- (NSDate * __nonnull)roundToDay;
@end


@interface NSDate (SWIFT_EXTENSION(LPInfra))
@property (nonatomic, readonly, copy) NSString * __nonnull timeAgoSimple;
@property (nonatomic, readonly, copy) NSString * __nonnull messageTime;
@property (nonatomic, readonly, copy) NSString * __nullable timeDelta;
@property (nonatomic, readonly, copy) NSString * __nonnull timeAgo;
- (NSString * __nonnull)stringFromFormat:(NSString * __nonnull)format withValue:(NSInteger)value;
- (NSString * __nonnull)getLocaleFormatUnderscoresWithValue:(double)value;
- (BOOL)isToday;
- (NSString * __nonnull)serializeDate;
+ (NSDate * __nullable)deserializeDate:(NSDictionary * __nonnull)dict key:(NSString * __nonnull)key;
@end


@interface NSManagedObject (SWIFT_EXTENSION(LPInfra))
- (void)saveContext;
@end


@interface NSOperationQueue (SWIFT_EXTENSION(LPInfra))
+ (NSOperationQueue * __nonnull)sharedOperationQueue;
@end


@interface NSOutputStream (SWIFT_EXTENSION(LPInfra))

/// Write String to outputStream
///
/// \param string The string to write.
///
/// \param encoding The NSStringEncoding to use when writing the string. This will default to UTF8.
///
/// \param allowLossyConversion Whether to permit lossy conversion when writing the string.
///
/// \returns  Return total number of bytes written upon success. Return -1 upon failure.
- (NSInteger)write:(NSString * __nonnull)string encoding:(NSUInteger)encoding allowLossyConversion:(BOOL)allowLossyConversion;
@end

@protocol NotificationManagerDelegate;

SWIFT_CLASS("_TtC7LPInfra19NotificationManager")
@interface NotificationManager : NSObject
@property (nonatomic, weak) id <NotificationManagerDelegate> __nullable delegate;
+ (NotificationManager * __nonnull)instance;
- (void)didReceiveRemoteNotification:(NSDictionary * __nonnull)userInfo;
- (void)sendLocalNotification:(NSString * __nonnull)text uid:(NSString * __nullable)uid;
- (void)postLocalNotification:(Message * __nonnull)message;
- (void)clearManager;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL("_TtP7LPInfra27NotificationManagerDelegate_")
@protocol NotificationManagerDelegate
@optional
- (void)showLocalNotificationIfNeeded:(NSString * __nonnull)text firstName:(NSString * __nullable)firstName lastName:(NSString * __nullable)lastName uid:(NSString * __nonnull)uid;
@required
- (void)pushNotificationRecieved:(Conversation * __nonnull)conversation;
@end


SWIFT_CLASS("_TtC7LPInfra13PusherManager")
@interface PusherManager : NSObject
@property (nonatomic, copy) NSSet<NSString *> * __nonnull registeredBrands;
@property (nonatomic, copy) NSString * __nullable pushToken;
+ (PusherManager * __nonnull)instance;
- (void)setPusherTokenWithToken:(NSData * __nonnull)token;
- (NSString * __nonnull)getAppIdentifier;

/// Register pusher with push notification token received from APNS (Apple). Before registering the Pusher, we make sure have the following params:
///
/// <ul><li>Consumer UserID</li><li>Push Token from Apple</li><li>CSDS Domain for Pusher</li><li>Account (brand account)
/// When all params availble - peform register</li></ul>
- (void)registerPusher:(Brand * __nonnull)brand;

/// Unregister pusher. Before unregistering the Pusher, we make sure we have the following params:
///
/// <ul><li>Consumer UserID</li><li>CSDS Domain for Pusher</li><li>Account (brand account)
/// When all params availble - peform unregister</li></ul>
- (void)unregisterPusher:(Brand * __nonnull)brand;
- (void)clearManager;
@end

@class NSNotificationCenter;

SWIFT_CLASS("_TtC7LPInfra12Reachability")
@interface Reachability : NSObject
@property (nonatomic, copy) void (^ __nullable whenReachable)(Reachability * __nonnull);
@property (nonatomic, copy) void (^ __nullable whenUnreachable)(Reachability * __nonnull);
@property (nonatomic) BOOL reachableOnWWAN;
@property (nonatomic, strong) NSNotificationCenter * __nonnull notificationCenter;
@property (nonatomic, readonly, copy) NSString * __nonnull currentReachabilityString;
- (nullable instancetype)initWithReachabilityRef:(SCNetworkReachabilityRef __nullable)reachabilityRef OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithHostname:(NSString * __nonnull)hostname;
+ (Reachability * __nullable)reachabilityForInternetConnection;
+ (Reachability * __nullable)reachabilityForLocalWiFi;
- (BOOL)startNotifier;
- (void)stopNotifier;
- (BOOL)isReachable;
- (BOOL)isReachableViaWWAN;
- (BOOL)isReachableViaWiFi;
@property (nonatomic, readonly, copy) NSString * __nonnull description;
@end


SWIFT_CLASS("_TtC7LPInfra4Ring")
@interface Ring : NSObject
@property (nonatomic, copy) NSString * __nullable ringID;
@property (nonatomic, copy) NSString * __nullable brandId;
@property (nonatomic, copy) NSString * __nullable conversationID;
@property (nonatomic, copy) NSString * __nullable consumerId;
@property (nonatomic, copy) NSString * __nullable skillId;
@property (nonatomic, strong) NSDate * __nullable ringExpiration;
@end


SWIFT_CLASS("_TtC7LPInfra22SocketTransportManager")
@interface SocketTransportManager : NSObject
@property (nonatomic, copy) NSDictionary<NSString *, LPWebSocket *> * __nonnull webSockets;
+ (SocketTransportManager * __nonnull)instance;
- (LPWebSocket * __nullable)getSocket:(NSString * __nonnull)brandID;
- (void)disconnect;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface UIColor (SWIFT_EXTENSION(LPInfra))
- (nonnull instancetype)initWithRgba:(NSString * __nonnull)rgba;
@end


@interface UIFont (SWIFT_EXTENSION(LPInfra))
- (CGSize)sizeOfString:(NSString * __nonnull)string constrainedToWidth:(double)width;
@end


SWIFT_CLASS("_TtC7LPInfra4User")
@interface User : NSManagedObject
@property (nonatomic, copy) NSString * __nonnull uid;
@property (nonatomic, copy) NSString * __nonnull firstName;
@property (nonatomic, copy) NSString * __nonnull lastName;
@property (nonatomic, copy) NSString * __nullable profileImageURL;
@property (nonatomic, copy) NSString * __nullable coverImageURL;
@property (nonatomic, copy) NSString * __nullable phoneNumber;
@property (nonatomic, copy) NSString * __nonnull typeRaw;
@property (nonatomic, copy) NSString * __nullable bio;
@property (nonatomic, strong) NSSet * __nonnull userMessages;
@property (nonatomic) BOOL isSaved;
@property (nonatomic, strong) NSDate * __nullable lastUpdated;
- (nonnull instancetype)initWithEntity:(NSEntityDescription * __nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * __nullable)context OBJC_DESIGNATED_INITIALIZER;
@end


@interface User (SWIFT_EXTENSION(LPInfra))
@property (nonatomic, readonly, copy) NSString * __nonnull fullName;
@property (nonatomic, readonly) BOOL isMe;
@end


SWIFT_CLASS("_TtC7LPInfra11UserManager")
@interface UserManager : NSObject
@property (nonatomic, copy) NSString * __nullable myUserID;
+ (UserManager * __nonnull)instance;

/// This method fetch user profile from the server.
///
/// <ul><li>Fetch user data from server</li><li>Save to DB</li><li>Return User to completion block</li></ul>
- (void)fetchUser:(NSString * __nonnull)brandID userID:(NSString * __nonnull)userID isMe:(BOOL)isMe completion:(void (^ __nullable)(User * __nonnull))completion failure:(void (^ __nullable)(NSError * __nonnull))failure;

/// Attach completion block which is being invoken when the Consumer (My) User is retrieved
- (void)attachMyUserCompletion:(void (^ __nonnull)(User * __nonnull))completion;

/// This method fetch user from the database.
///
/// <ul><li>Fetch user data from database</li><li>If user does not exist, a nil will be returned</li></ul>
- (User * __nullable)getUserFromDatabase:(NSString * __nonnull)userID;

/// If Needed, fetching the user profile from server and update in database If the user was not updated for 24Hrs
- (void)refreshUserProfile:(NSString * __nonnull)brandID user:(User * __nonnull)user;

/// Set user profile in database with details of user
- (void)setUserProfileWithDetails:(NSString * __nonnull)brandID firstName:(NSString * __nullable)firstName lastName:(NSString * __nullable)lastName profileImageURL:(NSString * __nullable)profileImageURL phoneNumber:(NSString * __nullable)phoneNumber;
- (User * __nonnull)getDefaultAgentUserFromDB:(NSString * __nonnull)senderId;
- (void)clearManager;
@end


@interface UserManager (SWIFT_EXTENSION(LPInfra))
@end


SWIFT_CLASS("_TtC7LPInfra5Utils")
@interface Utils : NSObject
+ (NSString * __nonnull)ALLOW_SDK_LOG_TO_FILE_KEY;
+ (BOOL)allowLogToFile;
+ (void)setAllowLogToFile:(BOOL)newValue;
+ (dispatch_queue_t __null_unspecified)backgroundQueue;
+ (void)examineLogFile;
+ (NSString * __nonnull)logsFilename;
+ (NSString * __nonnull)logsPath;
+ (NSString * __nullable)JSONStringify:(id __nonnull)value prettyPrinted:(BOOL)prettyPrinted;
+ (NSDictionary * __nullable)JSONDictionaryFromString:(NSString * __nonnull)string;
+ (void)getDataFromUrl:(NSURL * __nonnull)urL completion:(void (^ __nonnull)(NSData * __nullable, NSError * __nullable))completion;
+ (NSString * __nonnull)formatDate:(NSDate * __nonnull)date;
+ (NSString * __nonnull)trim:(NSString * __nonnull)str;
+ (BOOL)isValidEmail:(NSString * __nonnull)testStr;
+ (void)delay:(double)delay closure:(void (^ __nonnull)(void))closure;
+ (NSInteger)minutesBetweenDates:(NSDate * __nonnull)startDate endDate:(NSDate * __nonnull)endDate;
+ (void)backgroundThread:(void (^ __nonnull)(void))job;
+ (void)mainThread:(void (^ __nonnull)(void))job;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


#pragma clang diagnostic pop
