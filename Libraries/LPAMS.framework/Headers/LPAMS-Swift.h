// Generated by Apple Swift version 2.2 (swiftlang-703.0.18.1 clang-703.0.29)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if defined(__has_feature) && __has_feature(modules)
@import ObjectiveC;
@import LPInfra;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
@class Message;

SWIFT_CLASS("_TtC5LPAMS22AMSConversationHandler")
@interface AMSConversationHandler : NSObject <GeneralManagerProtocol>
+ (AMSConversationHandler * _Nonnull)instance;
+ (BOOL)shouldReloadData:(Message * _Nonnull)message;
- (void)clearManager;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface AMSConversationHandler (SWIFT_EXTENSION(LPAMS))
@end


@interface AMSConversationHandler (SWIFT_EXTENSION(LPAMS))
@end


@interface AMSConversationHandler (SWIFT_EXTENSION(LPAMS))
@end


@interface AMSConversationHandler (SWIFT_EXTENSION(LPAMS))
@end

@protocol AMSManagerDelegate;
@protocol ConversationParamProtocol;
@class Conversation;
@class Brand;
@class NSError;

SWIFT_CLASS("_TtC5LPAMS10AMSManager")
@interface AMSManager : BaseConversationManager <NotificationManagerDelegate, GeneralManagerProtocol>
@property (nonatomic, weak) id <AMSManagerDelegate> _Nullable managerDelegate;
+ (AMSManager * _Nonnull)instance;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)connectToSocketAsConsumer:(NSString * _Nonnull)brandID readyCompletion:(void (^ _Nullable)(void))readyCompletion;
- (void)connectToSocketAsBrand:(NSString * _Nonnull)brandID agentToken:(NSString * _Nonnull)agentToken readyCompletion:(void (^ _Nullable)(void))readyCompletion;
- (void)reconnectToSocketAsConsumer:(NSString * _Nonnull)brandID readyCompletion:(void (^ _Nullable)(void))readyCompletion;
- (void)reconnectToSocketAsBrand:(NSString * _Nonnull)brandID agentToken:(NSString * _Nonnull)agentToken readyCompletion:(void (^ _Nullable)(void))readyCompletion;
- (void)disconnectSocket:(NSString * _Nonnull)brandID;
- (void)addDelegateForHandlerID:(NSString * _Nonnull)handlerID delegate:(id <AMSManagerDelegate> _Nonnull)delegate;
- (void)removeDelegateForHandlerID:(NSString * _Nonnull)handlerID delegate:(id <AMSManagerDelegate> _Nonnull)delegate;

/// Removes all delegates from self.delegates that refer to the current dismissed conversationViewController
- (void)removeAllDelegatesForConversationQuery:(id <ConversationParamProtocol> _Nonnull)conversationQuery;

/// Initialize new AMS Handler related paired with conversation.
- (void)initializeConversation:(Conversation * _Nonnull)conversation;

/// Create new AMSConversationHandler and attach it as delegate to its corresponding Web Socket Handler
- (void)setupConversation:(Conversation * _Nonnull)conversation;
- (Conversation * _Nonnull)createConversation:(Brand * _Nonnull)brand;
- (BOOL)shouldDisplayLocalNotificationForConversation:(Conversation * _Nonnull)conversation;
- (BOOL)isBrandReady:(NSString * _Nonnull)brandID;
- (BOOL)didFetchHistoryQueryMessages;
- (BOOL)isFetchingHistoryQueryMessages;
- (void)sendMessageInConversation:(Conversation * _Nonnull)conversation message:(Message * _Nonnull)message completion:(void (^ _Nonnull)(void))completion failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
- (void)sendMessageInConversation:(Conversation * _Nonnull)conversation text:(NSString * _Nonnull)text completion:(void (^ _Nonnull)(void))completion failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
- (void)resolveConversation:(Conversation * _Nonnull)conversation;
- (BOOL)requestUrgentResponse:(Conversation * _Nonnull)conversation urgent:(BOOL)urgent;
- (void)retrieveNewMessagesForConversation:(Conversation * _Nonnull)conversation completion:(void (^ _Nullable)(void))completion failure:(void (^ _Nullable)(NSError * _Nonnull))failure;
- (void)csatScoreSubmissionDidFinish:(Conversation * _Nonnull)conversation;
- (void)pushNotificationRecieved:(Conversation * _Nonnull)conversation;
- (void)clearManager;
@end

@class Ring;

@interface AMSManager (SWIFT_EXTENSION(LPAMS))
- (void)takeConversation:(Ring * _Nonnull)ring agentToken:(NSString * _Nonnull)agentToken completion:(void (^ _Nonnull)(Conversation * _Nonnull))completion failure:(void (^ _Nonnull)(NSError * _Nonnull))failure;
- (void)backToQueue:(NSString * _Nonnull)userID conversation:(Conversation * _Nonnull)conversation;
- (void)subscribeAgentState:(NSString * _Nonnull)agentID conversation:(Conversation * _Nonnull)conversation;
- (void)setAgentState:(NSString * _Nonnull)agentUserId channels:(NSArray<NSString *> * _Nonnull)channels availability:(NSString * _Nonnull)availability description:(NSString * _Nonnull)description conversation:(Conversation * _Nonnull)conversation;
- (void)agentRequestConversation:(NSDictionary<NSString *, NSString *> * _Nonnull)context ttrDefName:(NSString * _Nonnull)ttrDefName channelType:(NSString * _Nonnull)channelType consumerId:(NSString * _Nonnull)consumerId conversation:(Conversation * _Nonnull)conversation;
- (NSArray<NSString *> * _Nonnull)getAllConsumersID;
- (NSDictionary<NSString *, NSArray<Conversation *> *> * _Nonnull)getConversationsByConsumers;
@end


@interface AMSManager (SWIFT_EXTENSION(LPAMS))
- (void)saveSubscriptionID:(NSString * _Nonnull)subscriptionID brandID:(NSString * _Nonnull)brandID;
- (NSString * _Nullable)getSubscriptionID:(NSString * _Nonnull)brandID;
- (void)removeSubscription:(NSString * _Nonnull)brandID;
- (void)sendGetClock:(NSString * _Nonnull)brandID completion:(void (^ _Nullable)(int64_t))completion;
- (void)saveClockDiff:(int64_t)clockDiff brandID:(NSString * _Nonnull)brandID;
@end

@class NSDate;

SWIFT_PROTOCOL("_TtP5LPAMS18AMSManagerDelegate_")
@protocol AMSManagerDelegate
- (void)didSendMessages:(Conversation * _Nonnull)conversation messages:(NSArray<Message *> * _Nonnull)messages;
- (void)didReceiveMessages:(Conversation * _Nonnull)conversation messages:(NSArray<Message *> * _Nonnull)messages;
- (void)resolveConvesationDidFail:(Conversation * _Nonnull)conversation error:(NSError * _Nonnull)error;
- (void)resolveConvesationRequestDidFinish:(Conversation * _Nonnull)conversation;
- (void)conversationDidResolve:(Conversation * _Nonnull)conversation;
- (void)newConversationCreated:(Conversation * _Nonnull)conversation;
- (void)urgentRequestDidFail:(Conversation * _Nonnull)conversation error:(NSError * _Nonnull)error;
- (void)chatStateChanged:(Conversation * _Nonnull)conversation state:(NSString * _Nonnull)state;
- (void)didChangeMessagesStatus:(Conversation * _Nonnull)conversation messages:(NSArray<Message *> * _Nonnull)messages;
- (BOOL)isConversationRelatedToViewController:(Conversation * _Nonnull)conversation;
- (void)conversationInitializedOnAMS:(Conversation * _Nonnull)conversation;
@optional
- (void)didReceiveTTRUpdate:(Conversation * _Nonnull)conversation date:(NSDate * _Nonnull)date;
- (void)didUpdateProfile:(Conversation * _Nonnull)conversation userId:(NSString * _Nonnull)userId;
- (void)csatScoreSubmissionDidFinish:(Conversation * _Nonnull)conversation;
- (void)csatScoreSubmissionDidFail:(Conversation * _Nonnull)conversation error:(NSError * _Nonnull)error;
@required
- (BOOL)isConversationVisible;
- (NSString * _Nullable)brandAccountID;
- (void)didReceiveRingUpdate:(NSString * _Nonnull)conversationID ring:(Ring * _Nonnull)ring;
@end

@class NSDictionary;

SWIFT_PROTOCOL("_TtP5LPAMS25ConversationParamProtocol_")
@protocol ConversationParamProtocol
- (NSArray<Conversation *> * _Nullable)getConversations;
- (Conversation * _Nullable)getActiveConversation;
- (NSArray<Conversation *> * _Nullable)getLatestClosedConversation:(NSInteger)conversationsCount;
- (Conversation * _Nonnull)createNewConversation;
- (NSString * _Nonnull)getQueryType;
- (BOOL)isConversationRelatedToQuery:(Conversation * _Nonnull)conversation;
- (NSString * _Nonnull)getBrandID;
- (NSString * _Nonnull)getQueryUID;
- (NSDictionary * _Nonnull)getQueryProperties;
@end


SWIFT_CLASS("_TtC5LPAMS10BrandQuery")
@interface BrandQuery : NSObject <ConversationParamProtocol>
- (nonnull instancetype)initWithBrandID:(NSString * _Nonnull)brandID OBJC_DESIGNATED_INITIALIZER;

/// Get all conversation by brand.
- (NSArray<Conversation *> * _Nullable)getConversations;

/// Get active conversation.
- (Conversation * _Nullable)getActiveConversation;

/// Get the latest closed conversation.
- (NSArray<Conversation *> * _Nullable)getLatestClosedConversation:(NSInteger)conversationsCount;
- (Conversation * _Nonnull)createNewConversation;
- (NSString * _Nonnull)getQueryType;
- (BOOL)isConversationRelatedToQuery:(Conversation * _Nonnull)conversation;
- (NSString * _Nonnull)getBrandID;
- (NSString * _Nonnull)getQueryUID;
- (NSDictionary * _Nonnull)getQueryProperties;
@end


SWIFT_CLASS("_TtC5LPAMS18BrandAndSkillQuery")
@interface BrandAndSkillQuery : BrandQuery
- (nonnull instancetype)initWithSkillID:(NSString * _Nonnull)skillID brandID:(NSString * _Nonnull)brandID OBJC_DESIGNATED_INITIALIZER;

/// Get all conversation by brand and skill.
- (NSArray<Conversation *> * _Nullable)getConversations;
- (Conversation * _Nonnull)createNewConversation;
- (NSString * _Nonnull)getQueryType;
- (BOOL)isConversationRelatedToQuery:(Conversation * _Nonnull)conversation;
- (NSString * _Nonnull)getQueryUID;
@end



SWIFT_CLASS("_TtC5LPAMS13ConsumerQuery")
@interface ConsumerQuery : BrandQuery
- (nonnull instancetype)initWithConsumerID:(NSString * _Nonnull)consumerID brandID:(NSString * _Nonnull)brandID agentToken:(NSString * _Nonnull)agentToken OBJC_DESIGNATED_INITIALIZER;

/// Get all conversation by consumerID.
- (NSArray<Conversation *> * _Nullable)getConversations;
- (Conversation * _Nonnull)createNewConversation;
- (NSString * _Nonnull)getQueryType;
- (BOOL)isConversationRelatedToQuery:(Conversation * _Nonnull)conversation;
- (NSString * _Nonnull)getQueryUID;
@end


SWIFT_CLASS("_TtC5LPAMS22ConversationDataSource")
@interface ConversationDataSource : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
+ (ConversationDataSource * _Nonnull)instance;

/// Get messages for an older conversation if exists
///
/// <ul><li>Get all converstions for query</li><li>Sort by creation date (newest is first)</li><li>Find the current conversation index</li><li>Find the next (older) conversation index</li><li>If current and next are different:</li><li>Update the current conversation ref</li><li>Get messages of the next conversation</li></ul>
- (Conversation * _Nullable)getOlderConversationForQueryMessagesIfExists:(id <ConversationParamProtocol> _Nonnull)query firstMessageOfCurrentConversation:(Message * _Nonnull)firstMessageOfCurrentConversation;

/// <code>   Get all conversations per query and params.
///    - QueryParamProtocol: protocol of the current requested type
/// 
/// </code>
- (NSArray<Conversation *> * _Nullable)getConversations:(id <ConversationParamProtocol> _Nonnull)query;

/// Get all active conversations per query and params.
///
/// <ul><li>QueryParamProtocol: protocol of the current requested type</li></ul>
- (Conversation * _Nullable)getActiveConversation:(id <ConversationParamProtocol> _Nonnull)query;

/// Get the newest (latest) close conversation if exists
///
/// <ul><li>QueryParamProtocol: protocol of the current requested type</li></ul>
- (NSArray<Conversation *> * _Nullable)getLatestClosedConversations:(id <ConversationParamProtocol> _Nonnull)query conversationsCount:(NSInteger)conversationsCount;
- (Conversation * _Nonnull)createConversation:(id <ConversationParamProtocol> _Nonnull)query;

/// Clear a dummy conversation and its assoicated messages. A dummy conversation is a conversation which is created and now only shows welcome message
- (void)clearDummyConversation:(Conversation * _Nonnull)conversation;
@end


#pragma clang diagnostic pop
