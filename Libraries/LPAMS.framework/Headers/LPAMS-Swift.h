// Generated by Apple Swift version 2.1.1 (swiftlang-700.1.101.15 clang-700.1.81)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if defined(__has_include) && __has_include(<uchar.h>)
# include <uchar.h>
#elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
#endif

typedef struct _NSZone NSZone;

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted) 
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
#endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
#if defined(__has_feature) && __has_feature(modules)
@import ObjectiveC;
@import LPInfra;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
@class Message;

SWIFT_CLASS("_TtC5LPAMS22AMSConversationHandler")
@interface AMSConversationHandler : NSObject
+ (AMSConversationHandler * __nonnull)instance;
+ (BOOL)shouldReloadData:(Message * __nonnull)message;
- (void)clearManager;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface AMSConversationHandler (SWIFT_EXTENSION(LPAMS))
@end


@interface AMSConversationHandler (SWIFT_EXTENSION(LPAMS))
@end


@interface AMSConversationHandler (SWIFT_EXTENSION(LPAMS))
@end


@interface AMSConversationHandler (SWIFT_EXTENSION(LPAMS))
@end

@protocol AMSManagerDelegate;
@class Conversation;
@class Brand;
@class NSError;

SWIFT_CLASS("_TtC5LPAMS10AMSManager")
@interface AMSManager : BaseConversationManager <NotificationManagerDelegate>
@property (nonatomic, weak) id <AMSManagerDelegate> __nullable managerDelegate;
+ (AMSManager * __nonnull)instance;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)connectToSocketAsConsumer:(NSString * __nonnull)brandID readyCompletion:(void (^ __nullable)(void))readyCompletion;
- (void)connectToSocketAsBrand:(NSString * __nonnull)brandID agentToken:(NSString * __nonnull)agentToken readyCompletion:(void (^ __nullable)(void))readyCompletion;
- (void)reconnectToSocketAsConsumer:(NSString * __nonnull)brandID readyCompletion:(void (^ __nullable)(void))readyCompletion;
- (void)reconnectToSocketAsBrand:(NSString * __nonnull)brandID agentToken:(NSString * __nonnull)agentToken readyCompletion:(void (^ __nullable)(void))readyCompletion;
- (void)disconnectSocket:(NSString * __nonnull)brandID;
- (void)addDelegateForHandlerID:(NSString * __nonnull)handlerID delegate:(id <AMSManagerDelegate> __nonnull)delegate;
- (void)removeDelegateForHandlerID:(NSString * __nonnull)handlerID delegate:(id <AMSManagerDelegate> __nonnull)delegate;

/// Initialize new AMS Handler related paired with conversation.
- (void)initializeConversation:(Conversation * __nonnull)conversation;

/// Create new AMSConversationHandler and attach it as delegate to its corresponding Web Socket Handler
- (void)setupConversation:(Conversation * __nonnull)conversation;
- (Conversation * __nonnull)createConversation:(Brand * __nonnull)brand;
- (BOOL)shouldDisplayLocalNotificationForConversation:(Conversation * __nonnull)conversation;
- (BOOL)isBrandReady:(NSString * __nonnull)brandID;
- (BOOL)didFetchHistoryQueryMessages;
- (BOOL)isFetchingHistoryQueryMessages;
- (void)sendMessageInConversation:(Conversation * __nonnull)conversation message:(Message * __nonnull)message completion:(void (^ __nonnull)(void))completion failure:(void (^ __nonnull)(NSError * __nonnull))failure;
- (void)sendMessageInConversation:(Conversation * __nonnull)conversation text:(NSString * __nonnull)text completion:(void (^ __nonnull)(void))completion failure:(void (^ __nonnull)(NSError * __nonnull))failure;
- (void)resolveConversation:(Conversation * __nonnull)conversation;
- (BOOL)requestUrgentResponse:(Conversation * __nonnull)conversation urgent:(BOOL)urgent;
- (void)retrieveNewMessagesForConversation:(Conversation * __nonnull)conversation completion:(void (^ __nullable)(void))completion failure:(void (^ __nullable)(NSError * __nonnull))failure;
- (void)csatScoreSubmissionDidFinish:(Conversation * __nonnull)conversation;
- (void)pushNotificationRecieved:(Conversation * __nonnull)conversation;
- (void)clearManager;
@end

@class Ring;

@interface AMSManager (SWIFT_EXTENSION(LPAMS))
- (void)takeConversation:(Ring * __nonnull)ring agentToken:(NSString * __nonnull)agentToken completion:(void (^ __nonnull)(Conversation * __nonnull))completion failure:(void (^ __nonnull)(NSError * __nonnull))failure;
- (void)backToQueue:(NSString * __nonnull)userID conversation:(Conversation * __nonnull)conversation;
- (void)subscribeAgentState:(NSString * __nonnull)agentID conversation:(Conversation * __nonnull)conversation;
- (void)setAgentState:(NSString * __nonnull)agentUserId channels:(NSArray<NSString *> * __nonnull)channels availability:(NSString * __nonnull)availability description:(NSString * __nonnull)description conversation:(Conversation * __nonnull)conversation;
- (void)agentRequestConversation:(NSDictionary<NSString *, NSString *> * __nonnull)context ttrDefName:(NSString * __nonnull)ttrDefName channelType:(NSString * __nonnull)channelType consumerId:(NSString * __nonnull)consumerId conversation:(Conversation * __nonnull)conversation;
- (NSArray<NSString *> * __nonnull)getAllConsumersID;
- (NSDictionary<NSString *, NSArray<Conversation *> *> * __nonnull)getConversationsByConsumers;
@end


@interface AMSManager (SWIFT_EXTENSION(LPAMS))
- (void)saveSubscriptionID:(NSString * __nonnull)subscriptionID brandID:(NSString * __nonnull)brandID;
- (NSString * __nullable)getSubscriptionID:(NSString * __nonnull)brandID;
- (void)removeSubscription:(NSString * __nonnull)brandID;
- (void)sendGetClock:(NSString * __nonnull)brandID completion:(void (^ __nullable)(int64_t))completion;
- (void)saveClockDiff:(int64_t)clockDiff brandID:(NSString * __nonnull)brandID;
@end

@class NSDate;

SWIFT_PROTOCOL("_TtP5LPAMS18AMSManagerDelegate_")
@protocol AMSManagerDelegate
- (void)didSendMessages:(Conversation * __nonnull)conversation messages:(NSArray<Message *> * __nonnull)messages;
- (void)didReceiveMessages:(Conversation * __nonnull)conversation messages:(NSArray<Message *> * __nonnull)messages;
- (void)resolveConvesationDidFail:(Conversation * __nonnull)conversation error:(NSError * __nonnull)error;
- (void)resolveConvesationRequestDidFinish:(Conversation * __nonnull)conversation;
- (void)conversationDidResolve:(Conversation * __nonnull)conversation;
- (void)newConversationCreated:(Conversation * __nonnull)conversation;
- (void)urgentRequestDidFail:(Conversation * __nonnull)conversation error:(NSError * __nonnull)error;
- (void)chatStateChanged:(Conversation * __nonnull)conversation state:(NSString * __nonnull)state;
- (void)didChangeMessagesStatus:(Conversation * __nonnull)conversation messages:(NSArray<Message *> * __nonnull)messages;
- (BOOL)isConversationRelatedToViewController:(Conversation * __nonnull)conversation;
@optional
- (void)didReceiveTTRUpdate:(Conversation * __nonnull)conversation date:(NSDate * __nonnull)date;
- (void)didUpdateProfile:(Conversation * __nonnull)conversation userId:(NSString * __nonnull)userId;
- (void)csatScoreSubmissionDidFinish:(Conversation * __nonnull)conversation;
- (void)csatScoreSubmissionDidFail:(Conversation * __nonnull)conversation error:(NSError * __nonnull)error;
@required
- (BOOL)isConversationVisible;
- (NSString * __nullable)brandAccountID;
- (void)didReceiveRingUpdate:(NSString * __nonnull)conversationID ring:(Ring * __nonnull)ring;
@end

@class NSDictionary;

SWIFT_PROTOCOL("_TtP5LPAMS25ConversationParamProtocol_")
@protocol ConversationParamProtocol
- (NSArray<Conversation *> * __nullable)getConversations;
- (Conversation * __nullable)getActiveConversation;
- (NSArray<Conversation *> * __nullable)getLatestClosedConversation:(NSInteger)conversationsCount;
- (Conversation * __nonnull)createNewConversation;
- (NSString * __nonnull)getQueryType;
- (BOOL)isConversationRelatedToQuery:(Conversation * __nonnull)conversation;
- (NSString * __nonnull)getBrandID;
- (NSString * __nonnull)getQueryUID;
- (NSDictionary * __nonnull)getQueryProperties;
@end


SWIFT_CLASS("_TtC5LPAMS10BrandQuery")
@interface BrandQuery : NSObject <ConversationParamProtocol>
- (nonnull instancetype)initWithBrandID:(NSString * __nonnull)brandID OBJC_DESIGNATED_INITIALIZER;

/// Get all conversation by brand.
- (NSArray<Conversation *> * __nullable)getConversations;

/// Get active conversation.
- (Conversation * __nullable)getActiveConversation;

/// Get the latest closed conversation.
- (NSArray<Conversation *> * __nullable)getLatestClosedConversation:(NSInteger)conversationsCount;
- (Conversation * __nonnull)createNewConversation;
- (NSString * __nonnull)getQueryType;
- (BOOL)isConversationRelatedToQuery:(Conversation * __nonnull)conversation;
- (NSString * __nonnull)getBrandID;
- (NSString * __nonnull)getQueryUID;
- (NSDictionary * __nonnull)getQueryProperties;
@end


SWIFT_CLASS("_TtC5LPAMS18BrandAndSkillQuery")
@interface BrandAndSkillQuery : BrandQuery
- (nonnull instancetype)initWithSkillID:(NSString * __nonnull)skillID brandID:(NSString * __nonnull)brandID OBJC_DESIGNATED_INITIALIZER;

/// Get all conversation by brand and skill.
- (NSArray<Conversation *> * __nullable)getConversations;
- (Conversation * __nonnull)createNewConversation;
- (NSString * __nonnull)getQueryType;
- (BOOL)isConversationRelatedToQuery:(Conversation * __nonnull)conversation;
- (NSString * __nonnull)getQueryUID;
@end



SWIFT_CLASS("_TtC5LPAMS13ConsumerQuery")
@interface ConsumerQuery : BrandQuery
- (nonnull instancetype)initWithConsumerID:(NSString * __nonnull)consumerID brandID:(NSString * __nonnull)brandID agentToken:(NSString * __nonnull)agentToken OBJC_DESIGNATED_INITIALIZER;

/// Get all conversation by consumerID.
- (NSArray<Conversation *> * __nullable)getConversations;
- (Conversation * __nonnull)createNewConversation;
- (NSString * __nonnull)getQueryType;
- (BOOL)isConversationRelatedToQuery:(Conversation * __nonnull)conversation;
- (NSString * __nonnull)getQueryUID;
@end


SWIFT_CLASS("_TtC5LPAMS22ConversationDataSource")
@interface ConversationDataSource : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
+ (ConversationDataSource * __nonnull)instance;

/// Get messages for an older conversation if exists
///
/// <ul><li>Get all converstions for query</li><li>Sort by creation date (newest is first)</li><li>Find the current conversation index</li><li>Find the next (older) conversation index</li><li>If current and next are different:</li><li>Update the current conversation ref</li><li>Get messages of the next conversation</li></ul>
- (Conversation * __nullable)getOlderConversationForQueryMessagesIfExists:(id <ConversationParamProtocol> __nonnull)query firstMessageOfCurrentConversation:(Message * __nonnull)firstMessageOfCurrentConversation;

/// <code>   Get all conversations per query and params.
///    - QueryParamProtocol: protocol of the current requested type
/// 
/// </code>
- (NSArray<Conversation *> * __nullable)getConversations:(id <ConversationParamProtocol> __nonnull)query;

/// Get all active conversations per query and params.
///
/// <ul><li>QueryParamProtocol: protocol of the current requested type</li></ul>
- (Conversation * __nullable)getActiveConversation:(id <ConversationParamProtocol> __nonnull)query;

/// Get the newest (latest) close conversation if exists
///
/// <ul><li>QueryParamProtocol: protocol of the current requested type</li></ul>
- (NSArray<Conversation *> * __nullable)getLatestClosedConversations:(id <ConversationParamProtocol> __nonnull)query conversationsCount:(NSInteger)conversationsCount;
- (Conversation * __nonnull)createConversation:(id <ConversationParamProtocol> __nonnull)query;
@end



@interface NSObject (SWIFT_EXTENSION(LPAMS))
- (NSDictionary<NSString *, id> * __nonnull)serializeToDictionary;
@end

#pragma clang diagnostic pop
