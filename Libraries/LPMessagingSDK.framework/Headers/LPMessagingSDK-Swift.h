// Generated by Apple Swift version 2.2 (swiftlang-703.0.18.1 clang-703.0.29)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if defined(__has_feature) && __has_feature(modules)
@import UIKit;
@import CoreGraphics;
@import ObjectiveC;
@import LPInfra;
@import Foundation;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
@class NSCoder;

SWIFT_CLASS("_TtC14LPMessagingSDK17AgentIsTypingView")
@interface AgentIsTypingView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@protocol UIAdapterDelegate;

SWIFT_PROTOCOL("_TtP14LPMessagingSDK39ConversationViewControllerAgentDelegate_")
@protocol ConversationViewControllerAgentDelegate
@optional
- (void)agentDidChangeUserInputText:(NSString * _Nonnull)text;
- (void)setUIAdapterDelegate:(id <UIAdapterDelegate> _Nonnull)delegate;
@end


SWIFT_CLASS("_TtC14LPMessagingSDK5LPLog")
@interface LPLog : NSObject
@property (nonatomic, copy) NSString * _Nullable timestamp;
@property (nonatomic, copy) NSString * _Nullable className;
@property (nonatomic, copy) NSString * _Nullable funcName;
@property (nonatomic, copy) NSString * _Nullable text;
@end

@protocol ConversationParamProtocol;
@class UIViewController;
@class LPUser;
@class NSData;
@protocol LPMessagingSDKNotificationDelegate;
@class UIImage;
@protocol LPMessagingSDKdelegate;

SWIFT_CLASS("_TtC14LPMessagingSDK14LPMessagingSDK")
@interface LPMessagingSDK : NSObject <UINavigationControllerDelegate>
@property (nonatomic, weak) id <LPMessagingSDKdelegate> _Nullable delegate;
@property (nonatomic, weak) id <LPMessagingSDKNotificationDelegate> _Nullable notificationDelegate;
@property (nonatomic, copy) NSString * _Nullable accountID;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
+ (LPMessagingSDK * _Nonnull)instance;
- (void)initialize:(NSString * _Nullable)brandID;
- (void)showConversation:(id <ConversationParamProtocol> _Nonnull)conversationQuery authenticationCode:(NSString * _Nullable)authenticationCode containerViewController:(UIViewController * _Nullable)containerViewController;
- (void)removeConversation:(id <ConversationParamProtocol> _Nonnull)conversationQuery;
- (void)reconnect:(id <ConversationParamProtocol> _Nonnull)conversationQuery authenticationCode:(NSString * _Nonnull)authenticationCode;
- (void)toggleChatActions:(NSString * _Nonnull)accountID;
- (void)setUserProfile:(LPUser * _Nonnull)lpuser accountID:(NSString * _Nonnull)accountID;
- (void)handlePush:(NSDictionary * _Nonnull)userInfo;
- (void)registerPushNotificationsWithToken:(NSData * _Nonnull)token notificationDelegate:(id <LPMessagingSDKNotificationDelegate> _Nullable)notificationDelegate;
- (id <ConversationParamProtocol> _Nonnull)getConversationBrandQuery:(NSString * _Nonnull)brandID;
- (id <ConversationParamProtocol> _Nonnull)getConversationBrandAndSkillQuery:(NSString * _Nonnull)brandID skillID:(NSString * _Nonnull)skillID;
- (id <ConversationParamProtocol> _Nonnull)getConversationConsumerQuery:(NSString * _Nullable)consumerID brandID:(NSString * _Nonnull)brandID agentToken:(NSString * _Nonnull)agentToken;

/// Check for an active(Open/Created) conversation according to conversation query. Return value: True - there is an active conversation False - there is no active conversation
- (BOOL)checkActiveConversation:(id <ConversationParamProtocol> _Nonnull)conversationQuery;
- (void)setCustomButton:(UIImage * _Nullable)image;
- (BOOL)isUrgent:(id <ConversationParamProtocol> _Nonnull)conversationQuery;
- (void)markAsUrgent:(id <ConversationParamProtocol> _Nonnull)conversationQuery;
- (void)dismissUrgent:(id <ConversationParamProtocol> _Nonnull)conversationQuery;
- (void)resolveConversation:(id <ConversationParamProtocol> _Nonnull)conversationQuery;
- (BOOL)isBrandReady:(NSString * _Nonnull)brandID;
- (NSString * _Nullable)getSDKVersion;
- (void)subscribeLogEvents:(enum LogLevel)logLevel logEvent:(void (^ _Nonnull)(LPLog * _Nonnull))logEvent;
@end


@interface LPMessagingSDK (SWIFT_EXTENSION(LPMessagingSDK))
- (void)initSocketForBrandID:(NSString * _Nonnull)brandID agentToken:(NSString * _Nonnull)agentToken readyCompletion:(void (^ _Nullable)(void))readyCompletion;
- (id <ConversationViewControllerAgentDelegate> _Nonnull)showAgentConversation:(id <ConversationParamProtocol> _Nonnull)conversationQuery authenticationCode:(NSString * _Nullable)authenticationCode containerViewController:(UIViewController * _Nonnull)containerViewController;
@end


@interface LPMessagingSDK (SWIFT_EXTENSION(LPMessagingSDK))
- (void)logout;
- (void)destruct;
@end

@class LPNotification;

SWIFT_PROTOCOL("_TtP14LPMessagingSDK34LPMessagingSDKNotificationDelegate_")
@protocol LPMessagingSDKNotificationDelegate
@optional
- (void)LPMessagingSDKNotificationWithDidReceivePushNotification:(LPNotification * _Nonnull)notification;
- (BOOL)LPMessagingSDKNotificationWithShouldShowPushNotification:(LPNotification * _Nonnull)notification;
- (UIView * _Nonnull)LPMessagingSDKNotificationWithCustomLocalPushNotificationView:(LPNotification * _Nonnull)notification;
- (void)LPMessagingSDKNotificationWithNotificationTapped:(LPNotification * _Nonnull)notification;
@end

@class NSError;

SWIFT_PROTOCOL("_TtP14LPMessagingSDK22LPMessagingSDKdelegate_")
@protocol LPMessagingSDKdelegate
@optional
- (void)LPMessagingSDKCustomButtonTapped;
- (void)LPMessagingSDKAgentDetails:(LPUser * _Nonnull)agent;
- (void)LPMessagingSDKActionsMenuToggled:(BOOL)toggled;
- (void)LPMessagingSDKHasConnectionError:(NSString * _Nullable)error;
- (void)LPMessagingSDKDidReceiveEventLog:(NSString * _Nonnull)eventLog;
- (void)LPMessagingSDKCSATScoreSubmissionDidFinish:(NSString * _Nonnull)accountID rating:(NSInteger)rating;
@required
- (void)LPMessagingSDKObseleteVersion:(NSError * _Nonnull)error;
- (void)LPMessagingSDKAuthenticationFailed:(NSError * _Nonnull)error;
- (void)LPMessagingSDKTokenExpired:(NSString * _Nonnull)brandID;
@optional
- (void)LPMessagingSDKAgentIsTypingStateChanged:(BOOL)isTyping;
- (void)LPMessagingSDKConversationStarted:(NSString * _Nullable)conversationID;
- (void)LPMessagingSDKConversationEnded:(NSString * _Nullable)conversationID;
- (void)LPMessagingSDKConnectionStateChanged:(BOOL)isReady brandID:(NSString * _Nonnull)brandID;
@end

@class Message;

SWIFT_CLASS("_TtC14LPMessagingSDK14LPNotification")
@interface LPNotification : NSObject
@property (nonatomic, copy) NSString * _Nonnull text;
@property (nonatomic, strong) LPUser * _Nonnull user;
@property (nonatomic, copy) NSString * _Nonnull accountID;
@property (nonatomic) BOOL isRemote;
@property (nonatomic, readonly, copy) NSString * _Nonnull toString;
- (nonnull instancetype)initWithText:(NSString * _Nonnull)text firstName:(NSString * _Nullable)firstName lastName:(NSString * _Nullable)lastName uid:(NSString * _Nullable)uid accountID:(NSString * _Nonnull)accountID isRemote:(BOOL)isRemote;
- (nonnull instancetype)initWithMessage:(Message * _Nonnull)message isRemote:(BOOL)isRemote;
- (nonnull instancetype)initWithText:(NSString * _Nonnull)text user:(LPUser * _Nonnull)user accountID:(NSString * _Nonnull)accountID isRemote:(BOOL)isRemote OBJC_DESIGNATED_INITIALIZER;
@end

@class User;

SWIFT_CLASS("_TtC14LPMessagingSDK6LPUser")
@interface LPUser : NSObject
@property (nonatomic, copy) NSString * _Nullable firstName;
@property (nonatomic, copy) NSString * _Nullable lastName;
@property (nonatomic, copy) NSString * _Nullable nickName;
@property (nonatomic, copy) NSString * _Nullable profileImageURL;
@property (nonatomic, copy) NSString * _Nullable phoneNumber;
@property (nonatomic, copy) NSString * _Nullable employeeID;
@property (nonatomic, copy) NSString * _Nullable uid;
- (nonnull instancetype)initWithUser:(User * _Nonnull)user;
- (nonnull instancetype)initWithFirstName:(NSString * _Nullable)firstName lastName:(NSString * _Nullable)lastName nickName:(NSString * _Nullable)nickName uid:(NSString * _Nullable)uid profileImageURL:(NSString * _Nullable)profileImageURL phoneNumber:(NSString * _Nullable)phoneNumber employeeID:(NSString * _Nullable)employeeID OBJC_DESIGNATED_INITIALIZER;
@end

@class Conversation;
@class UITableView;
@class NSIndexPath;
@class ConversationDataSource;
@class UITableViewCell;
@class UITextView;
@class UIColor;
@class UIGestureRecognizer;

SWIFT_PROTOCOL("_TtP14LPMessagingSDK17UIAdapterDelegate_")
@protocol UIAdapterDelegate
@optional
- (BOOL)sendClickedWithMessage:(NSString * _Nonnull)message inConversation:(Conversation * _Nonnull)inConversation;
- (UITableViewCell * _Nullable)cellForRowAtIndexPath:(UITableView * _Nonnull)tableView indexPath:(NSIndexPath * _Nonnull)indexPath dataSource:(ConversationDataSource * _Nonnull)dataSource;
- (void)executeActionAtIndex:(UIViewController * _Nonnull)viewController index:(NSInteger)index conversation:(Conversation * _Nullable)conversation complition:(void (^ _Nonnull)(void))complition;
- (void)textViewDidBeginEditingWithConversation:(Conversation * _Nullable)conversation;
- (void)textViewDidEndEditingWithConversation:(Conversation * _Nullable)conversation;
- (BOOL)textView:(UITextView * _Nonnull)textView shouldChangeTextInRange:(NSRange)range replacementText:(NSString * _Nonnull)text conversation:(Conversation * _Nullable)conversation;
- (BOOL)shouldSetUIReadOnly:(Conversation * _Nullable)conversation;
- (UIColor * _Nonnull)getTableViewBackgroundColor:(id <ConversationParamProtocol> _Nonnull)conversationQuery;
- (UIImage * _Nonnull)getDefaultRecepientAvatarImage:(id <ConversationParamProtocol> _Nonnull)conversationQuery;
- (UIGestureRecognizer * _Nonnull)getTableViewCustomGestureRecognizer;
@end


@interface UIImageView (SWIFT_EXTENSION(LPMessagingSDK))
@end


@interface UITableViewCell (SWIFT_EXTENSION(LPMessagingSDK))
@end


@interface UIView (SWIFT_EXTENSION(LPMessagingSDK))
@end

#pragma clang diagnostic pop
